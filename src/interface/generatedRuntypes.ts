import type { Static} from 'runtypes';
import { Array, Boolean, Literal, Number, Record, String } from 'runtypes';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const UserInfo = Record({ nameJa: String, nameEn: String, mailAddress: String });

export type UserInfo = Static<typeof UserInfo>;

export const AuthRt = Record({ ['POST /auth/register']: Record({ request: UserInfo.And(Record({ password: String })), response: Record({ success: Literal(true) }).Or(Record({ success: Literal(false), reason: Literal('validation').Or(Literal('emailAlreadyUsed')) })) }), ['POST /session']: Record({ request: Record({}), response: Record({ success: Literal(true) }).And(UserInfo).Or(Record({ success: Literal(false) })) }), ['POST /auth/emailAuthorization']: Record({ request: Record({ token: String }), response: Record({ success: Boolean }) }), ['POST /auth/login']: Record({ request: Record({ mailAddress: String, password: String }), response: Record({ success: Boolean }) }), ['POST /auth/logout']: Record({ request: Record({}), response: Record({}) }) });

export type AuthRt = Static<typeof AuthRt>;

export const TeamInfo = Record({ nameJa: String, nameEn: String });

export type TeamInfo = Static<typeof TeamInfo>;

export const Address = Record({ zipCode: String, prefCode: Number, town: String, areaStreet: String, buildings: String });

export type Address = Static<typeof Address>;

export const TeamRt = Record({ ['POST /team/belonging']: Record({ request: Record({ type: Literal('member').Or(Literal('guest')) }), response: Record({ teams: Array(TeamInfo) }) }), ['POST /team/create']: Record({ request: Record({ nameJa: String, nameEn: String, address: Address, telephone: String, mailAddress: String }), response: Record({ success: Boolean }) }) });

export type TeamRt = Static<typeof TeamRt>;

export const Types = AuthRt.And(TeamRt);

export type Types = Static<typeof Types>;
